/*jshint esversion: 7 */
/*

    If we are presented with the first k terms of a sequence it is impossible to say with 
    certainty the value of the next term, as there are infinitely many polynomial functions that can model the sequence.

    As an example, let us consider the sequence of cube numbers. This is defined by the generating function,
    u_n = n^3: 1, 8, 27, 64, 125, 216, ...

    Suppose we were only given the first two terms of this sequence. 
    Working on the principle that "simple is best" we should assume a linear relationship 
    and predict the next term to be 15 (common difference 7). Even if we were presented with the first three terms, 
    by the same principle of simplicity, a quadratic relationship should be assumed.

    We shall define OP(k, n) to be the nth term of the optimum polynomial 
    generating function for the first k terms of a sequence. It should be clear that OP(k, n) 
    will accurately generate the terms of the sequence for n ≤ k, 
    and potentially the first incorrect term (FIT) will be OP(k, k+1); 
    in which case we shall call it a bad OP (BOP).

    As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; 
    that is, for n ≥ 2, OP(1, n) = u_1.

    Hence we obtain the following OPs for the cubic sequence:
    OP(1, n) = 1 	1, "1", 1, 1, ...
    OP(2, n) = 7n−6 	1, 8, "15", ...
    OP(3, n) = 6n2−11n+6      	1, 8, 27, "58", ...
    OP(4, n) = n3 	1, 8, 27, 64, 125, ...

    Clearly no BOPs exist for k ≥ 4.

    By considering the sum of FITs generated by the BOPs (indicated in "red" above), we obtain 1 + 15 + 58 = 74.

    Consider the following tenth degree polynomial generating function:

    u_n = 1 − n + n^2 − n^3 + n^4 − n^5 + n^6 − n^7 + n^8 − n^9 + n^10

    Find the sum of FITs for the BOPs.

*/

/*
    The first 10 terms are
    1, 
    683, 
    44 287,
    838 861,
    8 138 021,
    51 828 151,
    247 165 843,
    954 437 177,
    3 138 105 961,
    9 090 909 091
*/

const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.question('Press enter to continue : ', (answer) => {
    let FITS = p101();
    console.log("The sum of FITs for the BOPs is", FITS.reduce((a,b)=>{return a+b;}) , "should be 74", FITS, "should be", [1, 15, 58]);
    rl.close();
});

function p101(){
    let points = [];
    let FITS = [];
    for (let i = 1; i <= 3; ++i){
        points.push(cube_test(i));
        //console.log(NewtonInterpolation(points));
        FITS.push(NewtonInterpolation(points));
    }

    return FITS;
}

function NewtonInterpolation(points){
    let n_j = [];
    let a_j = [];
    let FIT = 0;
    let x = points.length + 1;
    for (let i = 0; i < x - 1; i++){
        a_j[i] = DividedDifference(points, i);
        n_j[i] = 1;
        for (let j = 0; j < i; ++j){
            n_j[i] *= x - j + 1; 
        }
        FIT += a_j[i]*n_j[i];
    }

    return FIT;
}
function DividedDifference(points, i){
    return _DividedDifference(points, 0, i+1);
}

function _DividedDifference(points, startingIndex, length){
    if (length == 1){
        return points[startingIndex];
    }
    else if (length == 2){
        return (points[startingIndex + 1] - points[startingIndex]);
    }
    else{
        return (_DividedDifference(points, startingIndex + 1, length - 1) - 
            _DividedDifference(points, startingIndex, length - 1))/(length - 1);
    }
}
function u_n(n){
    return 1 - n + n**2 - n**3 + n**4 - n**5 + n**6 - n**7 + n**8 - n**9 + n**10;
}

function cube_test(n){
    return n**3;
}