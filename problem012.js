/*jshint esversion: 6 */
/*

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

/*

    To have K divisor, the number must be greater than K.
    I need a great bound or else, the computation may take forever

*/

/*
    Optimisation needed, brute force is SLOW
*/
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.question('Enter a natural number ', (answer) => {
  
    const parsed = parseInt(answer);

    if (isNaN(parsed)) {
        console.log("Please, enter a natural number next time <3");
        rl.close();
    }

    if (parsed < 1) {
        console.log("Enter a number greater than 0 next time");
        rl.close();
    }
    let factor = [];
    let triangular = 0;
    let natural = 1;
    while (factor.length <= parsed)
    {
        triangular += natural++;
        factor = findFactor(triangular);
    }

    console.log(triangular);
    rl.close();
});

function findFactor(number)
{
    factor = [];
    for (let i = 1; i <= Math.ceil(number/2); i++)
    {
        if (number%i == 0)
        {
            factor.push(i);
        }
    }

    factor.push(number);
    return factor;
}